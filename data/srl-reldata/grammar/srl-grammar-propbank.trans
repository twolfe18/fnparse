
# Keep pos2(i,t) in this rule because span-w1 is a schema relation with i in [1..300] or so.
# First arg of pos2 is limited to the tokens in the current document/sentence.
doneAnno(docid) & pos2(i,pos) & span-w1(t,i,j) => event1(t)

#event1(t) & span-w1(t,i,j) & lemma2(i,l) & frameTriage4(l,pos,synset,f) => predicate2(t,f)
event1(t) & span-w1(t,i,j) & pos2(i,posFine) & lemma2(i,lemma) & coarsenPos2(posFine,posCoarse) & frameTriage4(lemma,posCoarse,synset,frame) => predicate2(t,frame)


# On a size 600 random sample of dev, data/srl-reldata/propbank-newXP-fineFrames
# xue-palmer-args2:      tp(argument4)=3044     fp(argument4)=0 fn(argument4)=944       R(argument4)=76.3       P(argument4)=100.0      F(argument4)=86.6
# xue-palmer-deps-args2: tp(argument4)=2861     fp(argument4)=0 fn(argument4)=1127      R(argument4)=71.7       P(argument4)=100.0      F(argument4)=83.5
# xue-palmer-args2:      tp(srl2)=3132  fp(srl2)=0      fn(srl2)=856    R(srl2)=78.5    P(srl2)=100.0   F(srl2)=88.0
# xue-palmer-deps-args2: tp(srl2)=2882  fp(srl2)=0      fn(srl2)=1106   R(srl2)=72.3    P(srl2)=100.0   F(srl2)=83.9
# We are still way short of Tackstrom's claim of 88.2% recall


##### #event1(t) & xue-palmer-args2(t,s) => srl2(t,s)
##### #event1(t) & xue-palmer-deps-args2(t,s) => srl2(t,s)
##### #event1(t) & xue-palmer-otf-args2(t,s) => srl2(t,s)
##### event1(t) & tackstrom-args4(t,s,sHead,k) => srl2(t,s)
#####
##### #predicate2(t,f) & role2(f,k) => srl3(t,f,k)
##### predicate2(t,f) & coarsenFrame2(f,fc) & role2(fc,k) => srl3(t,fc,k)
#####
##### srl2(t,s) & srl3(t,fc,k) => argument4(t,fc,s,k)

# state=3008671
# state/tackstrom-args4=2576483
# agenda=1285525
# agenda/srl3=658470
# state/xue-palmer-otf-args2=232711
# agenda/srl2=232689
# agenda/event1=163106
# agenda/argument4=130602
# agenda/predicate2=100658
# state/srl3=49750
# state/srl2=45266
# state/argument4=44368
# state/event1=22146
# state/predicate2=21949
# state/startDoc=7999
# state/doneAnno=7999
# clearNonSchemaNodes=7998

### agenda/argument4 PER state/predicate2 = 130602 / 21949 = 6.0
# is this because of srl2 and srl3 gold pruning? I think so


### With skipSrlFilterStages=true, all srl2 and srl3 facts are taken
# agenda=4072712
# agenda/argument4=3492739
# state=1912275
# state/tackstrom-args4=1294655
# agenda/srl3=330270
# state/srl3=329608
# state/xue-palmer-otf-args2=117944
# agenda/srl2=117904
# state/srl2=117755
# agenda/event1=81469
# agenda/predicate2=50330
# state/argument4=22189
# state/event1=11117
# state/predicate2=11009
# state/startDoc=3999
# state/doneAnno=3999
# clearNonSchemaNodes=3998
# TIME Performance:
## agenda/argument4 PER state/predicate2 = 3492739 / 11009 = 317.3
# ACCURACY Performance:
### tp(argument4)=50528    fp(argument4)=0 fn(argument4)=8170      R(argument4)=86.1       P(argument4)=100.0      F(argument4)=92.5
### tp(event1)=25165       fp(event1)=0    fn(event1)=0    R(event1)=100.0 P(event1)=100.0 F(event1)=100.0
### tp(predicate2)=24897   fp(predicate2)=48       fn(predicate2)=268      R(predicate2)=98.9      P(predicate2)=99.8      F(predicate2)=99.4
### tp(srl2)=51542 fp(srl2)=211831 fn(srl2)=7156   R(srl2)=87.8    P(srl2)=19.6    F(srl2)=32.0
### tp(srl3)=56587 fp(srl3)=690353 fn(srl3)=399    R(srl3)=99.3    P(srl3)=7.6     F(srl3)=14.1



# grep 'uberts counts:' /tmp/UbertsLearnPipeline.txt | tail -n 1 | tr ' ' '\n' | grep = | grep -v noMatch
# state=3637510
# agenda=3527583
# state/tackstrom-args4=3217410
# agenda/argument4=3198078
# state/xue-palmer-otf-args2=289619
# agenda/event1=203630
# agenda/predicate2=125875
# state/argument4=55367
# state/event1=27680
# state/predicate2=27440
# state/startDoc=9997
# state/doneAnno=9997
# clearNonSchemaNodes=9996
### agenda/argument4 PER state/predicate2 = 3198078 / 27440 = 116.5
# tp(argument4)=50338    fp(argument4)=0 fn(argument4)=8360      R(argument4)=85.8       P(argument4)=100.0      F(argument4)=92.3
# tp(event1)=25165       fp(event1)=0    fn(event1)=0    R(event1)=100.0 P(event1)=100.0 F(event1)=100.0
# tp(predicate2)=24897   fp(predicate2)=48       fn(predicate2)=268      R(predicate2)=98.9      P(predicate2)=99.8      F(predicate2)=99.4


# NOTE: I don't think I'll ever be able to beat Tackstrom args for srl2 pruning.
# srl3 pruning is still an option, but as of now this is fast enough.
#predicate2(t,f) & tackstrom-args4(t,s,sHead,k) & coarsenFrame2(f,fc) => argument4(t,fc,s,k)
#predicate2(t,f) & tackstrom-args4(t,s,sHead,k) => argument4(t,f,s,k)

# This is like above except that it is more strict.
# Vanilla tackstrom args will add an (t,s,k) if path(t,s) and k have been seen together in training.
# This can allow roles which are not admitted by the frame, e.g. (propbank/be-v-1, ARG0).
# This can mess up AddNullSpanArguments which will only add null spans for roles which are possible.
predicate2(t,f) & tackstrom-args4(t,s,sHead,k) & coarsenFrame2(f,fc) & role2(fc,k) => argument4(t,f,s,k)

