#!/usr/bin/env python

import re

output_keys = True

class LogResults:

	# Deprecated: use key-values to pull out what you want instead
	#keys_to_print = ['train.TargetMicroF1', 'test.TargetMicroF1']
	#keys_to_print += ['train.GenerousMacroF1', 'test.GenerousMacroF1']
	#keys_to_print += ['train.ArgumentMicroF1', 'test.ArgumentMicroF1']
	#keys_to_print += ['syntax_mode', 'nTrainLimit', 'batchSize', 'passes', 'regularizer']
	#keys_to_print += ['total_time', 'log_file']
	#keys_to_print += ['dev.recallBias', 'dev.ArgumentMicroF1']

	def __init__(self, filename):

		# [main] args=[argId, 1, experiments/argId/1, saved-models/alphabets/argId-reg.model.gz, regular]
		# [main] workingDir = experiments/argId/1
		# config = {nTrainLimit=50, batchSize=4, passes=1, regularizer=1000.0, useGoldFrames=false}

		self.mode = '???'
		#self.working_dir = '???'
		#self.n_train = '???'
		self.syntax_mode = '???'
		self.alphabet_model = '???'
		self.log_file = filename
		self.test_perf = {}
		self.train_perf = {}
		self.config = {}
		self.total_time = '???'

		# Stores things like what the recallBias was and what dev set perf was
		self.dev_info = {}

		self.global_train_info = {}

		with open(filename) as f:
			for line in f:
				if line.startswith('[RoleVars]'): continue
				if line.startswith('[ArgPruner]'): continue
				if line.startswith('[test]'):
					ar = line.split()
					assert ar[-2] == '='
					self.test_perf[ar[-3]] = ar[-1]
				if line.startswith('[train]'):
					ar = line.split()
					if ar[-2] == '=':
						self.train_perf[ar[-3]] = ar[-1]

				s = 'config = {'
				i = line.find(s)
				if i >= 0:
					line = line[i+len(s):-2]
					for chunk in line.replace(',', '').split():
						ar = chunk.split('=')
						assert len(ar) == 2
						self.config[ar[0]] = ar[1]

				s = '[main] args=['
				i = line.find(s)
				if i >= 0:
					line = line[i+len(s):-2].replace(',', '')
					#print 'main line:', line
					ar = line.split()
					self.mode = ar[0]
					self.syntax_mode = ar[4]
					self.alphabet_model = ar[3]

				# NOTE: This was added feb10, after new log format, some stuff didn't change
				m = re.match('^\[main\]: ArgumentMicro(F1|PRECISION|RECALL) = (0.\d+)$', line)
				if m:
					k = 'ArgumentMicro' + m.group(1)
					assert k not in self.test_perf
					self.test_perf[k] = m.group(2)
				m = re.match('.*chose recallBias=(-?\d+\.\d+) with (\S+?)=(0.\d+)$', line)
				if m:
					# There can be multiple versions of this (e.g. pretrain and train)
					#version = '' if not self.dev_info else '-' + str(len(self.dev_info) / 2)
					version = '-' + (['A', 'B'][len(self.dev_info) / 2])
					self.dev_info['recallBias' + version] = m.group(1)
					self.dev_info[m.group(2) + version] = m.group(3)
				for k in ['workingDir', 'nTrain', 'useRoleCooc', 'useGlobalFeatures', 'l2Penalty', 'performPretrain', 'costFN', 'trainBatchSize', 'lrBatchScale', 'globalL2Penalty']:
					m = re.match('^' + k + '=(.+)$', line)
					if m:
						self.global_train_info[k] = m.group(1)

				try:
					# Logging will dump the number of ms since starting
					# as the first token on every line
					self.total_time = int(line.split()[0])
				except:
					pass
				#if line.startswith('[ParserExperiment] done, took'):
				#	self.total_time = line.split()[3]

		self.all_values = {}
		self.all_values.update({'train.' + k: v for k,v in self.train_perf.iteritems()})
		self.all_values.update({'test.' + k: v for k,v in self.test_perf.iteritems()})
		self.all_values.update({'dev.' + k: v for k,v in self.dev_info.iteritems()})
		self.all_values.update({'globalTrain.' + k: v for k,v in self.global_train_info.iteritems()})
		self.all_values.update(self.config)
		self.all_values['mode'] = self.mode
		self.all_values['syntax_mode'] = self.syntax_mode
		self.all_values['alphabet_model'] = self.alphabet_model
		self.all_values['log_file'] = filename

		self.all_values['total_time'] = self.total_time
		try:
			self.all_values['total_time'] = "%.1f" % (float(self.total_time) / (1000.0 * 60.0))
		except:
			pass

	def result_string(self, show_keys=True):
		toks = []
		for k in sorted(self.all_values.keys()):
			v = self.all_values[k]
			if v == '???': continue
		#for k in LogResults.keys_to_print:
		#	v = self.all_values.get(k, '???')
			if show_keys:
				toks.append(k + '=' + v)
			else:
				toks.append(v)
		return ' '.join(toks)


if __name__ == '__main__':
	import sys
	if len(sys.argv) < 2:
		print 'please give some log files to go through'
		sys.exit(-1)
	for filename in sys.argv[1:]:
		lr = LogResults(filename)
		print lr.result_string()

