#!/usr/bin/env python

import collections
import heapq
import json
import math
import numpy as np
import operator
import os
import pickle
import random
import redis
import scipy
from sklearn.linear_model import Ridge
import signal
import socket
import subprocess
import sys
import time
import uuid
import xml.etree.ElementTree as ET

class CommonEqualityMixin(object):
  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
  def __ne__(self, other):
    return not self.__eq__(other)

# sorry, global
template_info = None
FAILED_SCORE = 0.0
SER_Q_PATH = None
SER_Q = None

class Feature(CommonEqualityMixin):
  ''' uses strings as templates '''
  def __init__(self, label, templates=[]):
    if type(templates) is str:
      templates = [templates]
    assert type(label) is str
    assert type(templates) is list
    self.label = label
    self.templates = templates
    self.templates.sort()

  def __str__(self):
    x = '*'.join(self.templates)
    return "%s*%s" % (self.label, x)

  # TODO relies on a global variable
  def estimate_cardinality(self):
    c = template_info.label_cardinality[self.label]
    assert c is not None
    for t in self.templates:
      ct = template_info.template_cardinality[t]
      assert ct is not None
      c *= ct
    assert type(c) is int or type(c) is long
    return c

  def propose_modification(self, label_templates, basic_templates):
    # TODO prioritize whether you should be growing or shrinking this feature
    p_change_label = 0.1
    if len(label_templates) > 1 and random.random() < p_change_label:
      # change the label
      ys = [y for y in label_templates if y != self.label]
      return Feature(random.choice(ys), self.templates)
    else:
      # the higher the estimated cardinality, the greater the chance of
      # removing a template
      # e.g. cardinality = 100  -> p(shrink) = 0.500
      #      cardinality = 4    -> p(shrink) = 0.167
      #      cardinality = 400  -> p(shrink) = 0.667
      #      cardinality = 4000 -> p(shrink) = 0.863 (only if #templates > 1 though)
      card = pow(self.estimate_cardinality(), 0.5)
      p_shrink = card / (card + 10.0)
      if len(self.templates) > 1 and random.random() < p_shrink:
        # add a new template
        xs = [x for x in basic_templates if x not in self.templates]
        if len(xs) > 0:
          return Feature(self.label, self.templates + [random.choice(xs)])
        else:
          raise Exception('cant extend this Feature any further')
      else:
        # remove a template
        assert len(self.templates) >= 2
        tmpl = random.sample(self.templates, len(self.templates) - 1)
        return Feature(self.label, tmpl)


class FeatureSet(object):
  def __init__(self, features=[], derived_from=None):
    self.features = features
    self.derived_from = derived_from

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.features == other.features

  def __ne__(self, other):
    return not self.__eq__(other)

  def estimate_cardinality(self):
    ''' assumes that features never overlap '''
    c = 1
    for f in self.features:
      cf = f.estimate_cardinality()
      assert cf is not None and (type(cf) is int or type(cf) is long)
      c += cf
    return c

  def propose_modification(self, label_templates, basic_templates):
    ''' returns a new FeatureSet derived from this feature set '''
    debug = True
    card = self.estimate_cardinality()
    l = 0.5
    p_add_feature = l * 100.0 / (100.0 + pow(card, 0.4)) \
      + (1.0 - l) * (2.0 / (2.0 + len(self.features)))
    if random.random() < p_add_feature:
      f = self.new_feature(label_templates, basic_templates)
      if debug:
        print '[propose_modification] len(self.features) =', \
          len(self.features), 'cardinality =', card, 'p_add_features =', p_add_feature
        print '[propose_modification] new feature:', f
      return FeatureSet(self.features + [f], derived_from=self)
    else:
      # modify and replace a feature that is already in this feature set
      try:
        i = random.randrange(len(self.features))
        f = self.features[i].propose_modification(label_templates, basic_templates)
        if debug:
          print '[propose_modification] len(self.features) =', \
            len(self.features), 'cardinality =', card, 'p_add_features =', p_add_feature
          print '[propose_modification] modify existing feature:', self.features[i], '=>', f
        return FeatureSet([f] + self.features[:i] + self.features[i+1:], derived_from=self)
      except:
        return self.propose_modification(label_templates, basic_templates)

  def new_feature(self, label_templates, basic_templates):
    ''' creates a feature that is not already in this feature set '''
    y = random.choice(label_templates)
    # prefer adding features with small number of templates
    xn = 1
    while random.random() < 0.1 and xn < len(basic_templates):
      xn = xn + 1
    xs = random.sample(basic_templates, xn)
    f = Feature(y, xs)
    if f in self.features:
      return self.new_feature(label_templates, basic_templates)
    else:
      return f

  def __str__(self):
    return "<FeatureSet %s>" % (', '.join([str(x) for x in self.features]))

  def config_string(self):
    ''' returns a description to be passes to an experiment '''
    return ' + '.join([str(x) for x in self.features])

class Config(CommonEqualityMixin):
  ''' A full specification of a FN parsing model '''
  def __init__(self, feature_set, regularizer=8):
    assert type(regularizer) is int   # this is the natural log of the true regularizer
    self.feature_set = feature_set
    self.regularizer = regularizer
    self.params = {}
    self.params['regularizer'] = str(regularizer)
    self.params['passes'] = '5'
    self.params['batchSize'] = '1'
    self.params['parserMode'] = 'classifySpans'
    self.params['randomSeed'] = '9001'
    # pre-compute/cache description/config_string
    self.cs = 'features=' + self.feature_set.config_string()
    for k, v in self.params.iteritems():
      self.cs += "_%s=%s" % (k, v)

  def config_string(self):
    return self.cs

def mutate_config(config):
  next_fs = config.feature_set.propose_modification()
  cur_card = config.feature_set.estimate_cardinality()
  next_card = next_fs.estimate_cardinality()
  diff_card = next_card - cur_card
  # Do your best to guess if the regularizer needs to change
  children = [Config(next_fs, config.regularizer)]
  if card_diff > 25000 or card_diff / cur_card > 1.5:
    children.append(Config(next_fs, config.regularizer + 1))
  if card_diff < -25000 or card_diff / cur_card < -1.5:
    children.append(Config(next_fs, config.regularizer - 1))
  return children


class ConfigQueue(object):
  '''
  An infinite queue of items. A seed set of items should be pushed onto the queue
  to begin with, but after that this queue will generate new items by calling
  propose_modification on existing items. Remember to call observe_score to let this
  queue know what are good items and which are bad.

  There are only a few requirements of the elements that go into this queue:
  1) must have a propose_modification method which returns a mutated version of the entry
  2) must have a config_string method which fully captures the essesnce of the entry
  '''
  def __init__(self, mutation_function, greediness=1.0):
    self.mutation_function = mutation_function  # item -> [item]
    self.greediness = greediness
    self.config2item = {}   # Has entries for *all* configs that came from self
    self.scores = []        # Tuples of (score, item) representing the observed scores
    self.config2score = {}  # Has entries for configs that have had observe_score called
    self.waiting = []       # List of items that should be popped before mutating scored items

  def _pick(self, greediness):
    debug = False
    # find the max score
    m = max([x[0] for x in self.scores])
    weights = []
    z = 0.0
    for s, item in self.scores:
      regret = (m - s) * 10.0
      w = math.exp(-regret * greediness)
      weights.append(w)
      z += w
    t = random.random() * z
    if debug:
      print '[pick] z =', z, 't =', t
    c = 0.0
    for i in range(len(weights)):
      c += weights[i]
      if debug:
        print '[pick]', self.scores[i][1], 'has score', c
      if c >= t:
        item = self.scores[i][1]
        print '[pick] chose', item
        return item
    # Should never get here
    print '[pick] scored_feature_sets:', self.scores
    print '[pick] weights:', weights
    assert False

  def show_state(self, k=10):
    print '[show_state]', len(self.scores), 'observations'
    best = sorted(self.scores, key=operator.itemgetter(0), reverse=True)
    for i in range(min(k, len(best))):
      score, item = best[i]
      print "[show_state] %dth best\t%.3f\t%s" % (i, score, item.config_string())

  def observe_score(self, score, config):
    ''' Record the score of a given config/item '''
    print '[observe_score] score =', score, 'config =', config
    assert type(score) is float
    assert type(config) is str
    if config in self.config2score:
      if self.config2score[config] == FAILED_SCORE:
        print ("[observe_score] WARN: may need to sleep longer, " \
          "%s was originally deemed failed but later reported a score of %f") \
          % (config, score)
      else:
        raise Exception(config + ' had a score of ' \
          + str(self.config2score[config]) \
          + ' but you tried to observe the score ' + str(score))
    self.config2score[config] = score
    # print the biggest weights
    if len(self.scores) % 10 == 0:
      self.show_state()

  def push(self, item):
    ''' Push an item onto the queue which must be run before
    propose_modification's are considered '''
    cs = item.config_string()
    assert cs not in self.config2item
    self.config2item[cs] = item
    self.waiting.append(item)

  def pop(self):
    ''' Returns a pushed item if there is one, otherwise chooses
    a scored item and mutates it with propose_modification '''
    if self.waiting:
      return self.waiting.pop()
    else:
      if len(self.scores) == 0:
        raise Exception('you must seed some items using push so there is something to mutate')
      tries = 0
      max_tries = 100
      while tries < max_tries:
        # g->0 as we run out of tries
        g = self.greediness * (max_tries - tries) / float(max_tries)
        parent = self._pick(g)
        children = self.mutation_function(parent)
        feasible = [c for c in children if c.config_string() not in self.config2score]
        if feasible:
          random.shuffle(feasible)
          while len(feasible) > 1:
            self.push(feasible.pop())
          return feasible.pop()
        else:
          tries += 1
      print '[pop] couldn\'t generate a new configuration'
      return None


class SgeJobTracker(object):
  ''' A job tracker that asks qstat for the jobs that are
  running and spawns jobs with qsub '''
  def can_submit_more_jobs(self):
    return len(self.jobs_queued()) < 30

  def jobs(self):
    '''
    name_predicate should be a lambda that takes a string (name)
    and returns true if the job should be kept.
    This method skips over any jobs that are marked as QLOGIN,
    so name_predicate need not filter those out.
    Returns a list of job names.
    '''
    xml = subprocess.check_output(['qstat', '-u', 'twolfe', '-xml'])
    xml = ET.fromstring(xml)
    assert xml.tag == 'job_info'
    # NOTE: wow this is really bad...
    # SGE reports *running* jobs in a list called 'queue_info'
    # and reports *queued* jobs in a list called 'job_info'
    for info_name in ['job_info', 'queue_info']:
      info = xml.find(info_name)
      assert info is not None
      # NOTE: each 'job_list' is actually a job
      # not a list of jobs as the name would suggest
      for j in info.findall('job_list'):
        #print 'j.tag', j.tag
        state = j.find('state').text    # e.g. 'r' or 'qw'
        name = j.find('JB_name').text
        #print '[sge jobs]', state, name
        if name == 'QLOGIN':
          continue
        yield (state, name)

  def jobs_running(self):
    ''' returns a list of job names '''
    return [name for state, name in self.jobs() if state == 'r']

  def jobs_queued(self):
    ''' returns a list of job names '''
    return [name for state, name in self.jobs() if state == 'qw']

  def spawn(self, name, args):
    # TODO need to add {'resultReporter':'redis:host,channel,port'}
    assert False
    cmd = ['qsub', '-N', name, 'ForwardSelectionWorker.qsub'] + args
    print '[sge spawn] cmd =', cmd
    subprocess.Popen(cmd)
    time.sleep(0.2)


class LocalJobTracker(object):
  '''
  mock job tracker which uses redis instead of qsub
  if debug is true, this will call scripts/dummy-forward-selection-job
  else this will call the actual experiment
  '''
  def __init__(self, debug=False, max_concurrent_jobs=2):
    self.key = 'dummy-job-tracker.jobs'
    self.redis = redis.StrictRedis(host='localhost', port=6379, db=0)
    self.debug = debug
    self.max_concurrent_jobs = max_concurrent_jobs

  def remove_all_jobs(self):
    ''' ensures that there are no jobs running (for testing) '''
    self.redis.delete(self.key)

  def can_submit_more_jobs(self):
    return len(self.jobs_running()) < self.max_concurrent_jobs

  def jobs_running(self):
    # TODO this won't work in cases where jobs die!
    # qsub can handle this, but to remove from redis queue, we've been assuming things finish
    return self.redis.lrange(self.key, 0, -1)

  def set_job_done(self, name):
    print '[set_job_done] name=' + name
    self.redis.lrem(self.key, 0, name)

  def jobs_queued(self):
    return []

  def spawn(self, name, args):
    ''' args should be a dictionary of values to pass to grid.Runner '''
    self.redis.rpush(self.key, name)
    if self.debug:
      raise Exception('need to update args for dummy-forward-selection-job')
      subprocess.Popen(['scripts/dummy-forward-selection-job'] + args)
    else:
      cp = subprocess.check_output(['find', 'target/', '-iname', '*.jar']).strip()
      cp = ':'.join([x.strip() for x in cp.split('\n')])
      cmd = ['java', '-Xmx4G', '-ea', '-cp', cp]
      cmd += ['-XX:+UseG1GC', '-XX:G1ReservePercent=2', '-XX:ConcGCThreads=1', '-XX:ParallelGCThreads=1']
      #cmd.append('edu.jhu.hlt.fnparse.experiment.ForwardSelectionWorker')
      #cmd += args
      cmd.append('edu.jhu.hlt.fnparse.experiment.grid.Runner')
      for k, v in args.iteritems():
        cmd += [k, v]
      #print 'about to spawn:', cmd
      print 'about to spawn:', ' '.join(cmd)
      subprocess.Popen(cmd)


# TODO rip out the config_q part of this, daemonize it, and release it as a robust
# version of qsub (i.e. watches to make sure jobs finish, restarts them if not)
class ForwardSelection:
  def __init__(self, name, working_dir, job_tracker, config_q, \
      poll_interval=3.0, max_train_size=None, max_num_jobs=None, \
      redis_config={'channel':'forward-selection', 'host':'localhost', 'port':'6379', 'db':'0'}):
    print '[ForwardSelection] attempting to use redis server at', redis_config
    self.name = name
    self.working_dir = working_dir  # where workers are allowed to dump results
    self.redis_config = redis_config
    self.job_tracker = job_tracker  # talks to qsub
    self.config_q = config_q
    self.name2config = {}           # stores (job name -> config string)
    self.config2name = {}
    self.poll_interval = poll_interval
    self.dispatched = set()         # names of the jobs that (should be) running
    self.max_train_size = max_train_size  # limit on size of training data to make things faster
    self.max_num_jobs = max_num_jobs      # limit on how many total jobs can be submitted

  def parse_message(self, data):
    '''
    parses a message from the experiment over redis pubsub
    and returns a tuple of (config, score)
    '''
    toks = data.split('\t')
    assert len(toks) == 2
    score = float(toks[0])
    config = toks[1]
    return (config, score)

  def start_job(self):
    ''' returns a unique job name and updates self.name2config '''
    item = self.config_q.pop()
    if item:
      name = "fs-%s-%d" % (self.name, len(self.name2config))
      config = item.config_string()
      assert name not in self.name2config
      assert config not in self.config2name
      self.name2config[name] = config
      self.config2name[config] = name
      print '[start_job] name=' + name + ' config=' + config
      wd = os.path.join(self.working_dir, name + '-wd')
      if not os.path.isdir(wd):
        os.mkdir(wd)
      # Parameters for cross-validation
      K = 2
      p = 0.15
      cmd = {}
      cmd['KpTrainDev'] = "%d %f" % (K, p)
      if self.max_train_size:
        cmd['MaxTrainSize'] = str(self.max_train_size)
      cmd['resultReporter'] = "redis:%s,%s,%s" % \
        (self.redis_config['host'], self.redis_config['channel'], self.redis_config['port'])
      cmd['workingDir'] = wd
      print '[start_job] item.params =', item.params
      cmd.update(item.params)
      self.job_tracker.spawn(name, cmd)
      self.dispatched.add(name)
      return name
    else:
      return None

  def can_submit_more_jobs(self):
    if self.max_num_jobs and self.num_jobs >= self.max_num_jobs:
      return False
    return self.job_tracker.can_submit_more_jobs()

  def run(self):
    r = redis.StrictRedis(host=self.redis_config['host'], port=self.redis_config['port'], db=self.redis_config['db'])
    p = r.pubsub(ignore_subscribe_messages=True)
    p.subscribe(self.redis_config['channel'])
    perf_file = open(os.path.join(self.working_dir, 'perf.txt'), 'w')
    self.num_jobs = 0
    while True:
      # Try to dispatch new jobs
      if self.can_submit_more_jobs():
        if self.start_job():
          self.num_jobs += 1
        else:
          print 'Done!'
          break
      else:
        # Check for results
        message = p.get_message()
        print 'received message:', message
        if message:
          (config, score) = self.parse_message(message['data'])
          name = self.config2name[config]
          print name, '/', config, 'finished successfully with a score', score
          perf_file.write("%f\t%s\t%s\n" % (score, name, config))
          perf_file.flush()
          self.config_q.observe_score(score, config)
          # Remove this jobs from dispatched
          if type(self.job_tracker) is LocalJobTracker: # for debugging
            self.job_tracker.set_job_done(name)
          try:
            self.dispatched.remove(name)
          except:
            print name + ' was not in dispatched, we gave up on this job as failed previously'
        else:
          # check if any jobs died
          r = set(self.job_tracker.jobs_running() + self.job_tracker.jobs_queued())
          failed = set([name for name in self.dispatched if name not in r])
          failed_configs = set()
          for name in failed:
            config = self.name2config[name]
            print 'failed:', name, config
            assert config not in failed_configs
            failed_configs.add(config)
            self.config_q.observe_score(FAILED_SCORE, config)
            self.dispatched.remove(name)
          else:
            print 'everything is running nicely:', len(r)
            time.sleep(self.poll_interval)
    perf_file.close()


class TemplateInfo(object):
  def __init__(self, filename):
    print '[TemplateInfo init] reading template information from', filename
    self.filename = filename
    self.template_cardinality = {} # string -> int
    self.basic_templates = [] # list of strings (names)
    f = open(filename, 'r')
    for line in f:
      toks = line.strip().split('\t')
      template_name = toks[0]
      template_card_frameid = int(toks[1])
      template_card_rolelab = int(toks[2])
      assert template_name not in self.template_cardinality
      if template_card_rolelab > 1:
        self.template_cardinality[template_name] = template_card_rolelab
        self.basic_templates.append(template_name)
    f.close()
    # NOTE: the cardinality of frame is w.r.t. how many frames could possibly
    # be evoked at a give target, which is much less than the number of total frames
    self.label_cardinality = {'intercept':1, 'frame':10, 'frameRole':50, 'role':15}
    print '[TemplateInfo init] done'


def main(template_info_filename, ser_q_filename, deser_q_filename=None):
  # Read in the set of templates from disk (dumped by BasicFeatureTemplates)
  global template_info
  template_info = TemplateInfo(template_info_filename)
  local = True
  #labels = ['frame', 'intercept']
  labels = ['frame * prune', 'frameRole', 'role']
  extra_seeds = ['frame * prune * span1Width/2' \
   + ' + frame * prune * Dist(Len5,Span1.Last,Span2.First)' \
   + ' + frameRole * head1Word' \
   + ' + frameRole * span1FirstWord']

  # Create the config queue
  if deser_q_filename is None:
    print 'creating empty config queue'
    # Right now the seed set is just each of the labels conjoined
    # with the headword. You can manually add some good seeds here if you know them.
    q = ConfigQueue(mutation_function=mutate_config, greediness=1.0)
    for y in labels:
      fs = FeatureSet(features=[Feature(y + '*head1Word')])
      q.push(Config(fs, regularizer=8))
    for fs_str in extra_seeds:
      fs = FeatureSet(features=[Feature(fs_str)])
      q.push(Config(fs, regularizer=8))
  else:
    print 'loading config queue from', deser_q_filename
    q = pickle.load(open(deser_q_filename, 'rb'))
    q.show_state()

  # Make sure config queue is setup to be saved on SIGINT
  global SER_Q_PATH
  global SER_Q
  if ser_q_filename != '/dev/null':
    print 'setting up to save to', ser_q_filename, 'on Ctr-C'
    SER_Q_PATH = ser_q_filename
    SER_Q = q
    def save_config_q_handler(signum, frame):
      ''' Function that saves the config queue on Ctr-C so that you can resume later '''
      if SER_Q is not None and SER_Q_PATH is not None:
        print 'saving config queue to', SER_Q_PATH
        pickle.dump(SER_Q, open(SER_Q_PATH, 'wb'))
      sys.exit(0)
    signal.signal(signal.SIGINT, save_config_q_handler)

  # Create the job tracker
  if local:
    jt = LocalJobTracker(debug=False, max_concurrent_jobs=2)
    jt.remove_all_jobs()
  else:
    jt = SgeJobTracker()

  #wd = 'experiments/forward-selection/frameId'
  wd = 'experiments/forward-selection/roleLabeling'
  rc = {
    'channel': 'forward-selection',
    'host': socket.gethostname(),
    'port': '6379',
    'db': '0'
  }
  max_train = 10  # TODO make this bigger!
  max_jobs = 1    # TODO make this bigger!
  fs = ForwardSelection('test', wd, jt, q, redis_config=rc,
    poll_interval=3.0, max_train_size=max_train, max_num_jobs=max_jobs)

  os.system('rm logging/forward-selection/*')
  if not local:
    print 'cleanup...'
    os.system('kill-all-jobs')
    time.sleep(2)
  print 'starting...'
  fs.run()

if __name__ == '__main__':

  # Make stdout flush regularly
  sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

  if len(sys.argv) == 3:
    main(sys.argv[1], sys.argv[2])
  elif len(sys.argv) == 4:
    main(sys.argv[1], sys.argv[2], deser_q_filename=sys.argv[3])
  else:
    print 'please provide:'
    print '1) a path to a basic template cardinality file (e.g. experiments/forward-selection/basic-templates.txt)'
    print '2) a path to save the ConfigQueue to'
    print '3) [optional] a place to load a ConfigQueue from'
    sys.exit(-1)


# every experiment gets a human readable, but uniq name, e.g. 'frameId-forwardSelection-2014-10-09'
# every job gets a uniq id, a UUID
# the experiment name is used as a key in redis
# the values associated with it json that represent information about the run
# e.g. some run might be:
#{
#  jobId : '2b26c166-4f56-11e4-99fc-7c7a9146f5f0',
#  command : 'java -Xmx4G edu.jhu.hlt.fnparse.foo.Bar',
#  jar_hash : 'a5ff9934d159216c49a2b386edba062a15100907',
#  completed : '2014-10-09 01:24:09',
#  host : 'ch12',
#  params : {foo = 42, bar = 'baz'}
#  results : {targetMicroF1 = 0.733, runtime : 934.2}
#}




